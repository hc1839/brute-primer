(:
   Apply a set of criteria to the primers generated by Brute Primer. See
   index.html in the example directory for more information and for the
   criterion numbers.

   Set the context item to the XML output from Brute Primer.
:)

declare variable $numReturn := 5;   (: Maximum number of primer pairs to return. :)
declare variable $minGcClampLength := 2;   (: Minimal GC clamp length. :)

(: True if a given sequence has a GC clamp of a minimal length. :)
declare function local:hasGcClamp($sequence as xs:string, $minClampLength as xs:integer) as xs:boolean {
   let $regexp := string-join(("[GC]{", xs:string($minClampLength), ",}$"), "")
   return matches($sequence, $regexp, "i")
};

element top-primer-pairs {

(
   for $primerPair in /*/*
   let $meltTempFwd := xs:decimal($primerPair/melting-temperature-fwd)
   let $meltTempRev := xs:decimal($primerPair/melting-temperature-rev)
   where 58 >= $meltTempFwd and $meltTempFwd >= 52 and 58 >= $meltTempRev and $meltTempRev >= 52   (: Criterion 2. :)
   let $meltTempDiff := abs($meltTempFwd - $meltTempRev)
   where 5 >= $meltTempDiff   (: Criterion 3. :)
   where   (: Criterion 1. :)
      local:hasGcClamp($primerPair/fwd-primer-sequence, $minGcClampLength) and
      local:hasGcClamp($primerPair/rev-primer-sequence, $minGcClampLength)
   order by $meltTempDiff   (: Criterion 3. :)
   return $primerPair
)[position() = (1 to $numReturn)]

}
